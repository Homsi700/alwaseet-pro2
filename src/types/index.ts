// src/types/index.ts

export interface InvoiceItem {
  productId: string;
  productName?: string; // Backend might fetch this based on productId
  quantity: number;
  unitPrice: number;
  discountRate?: number; // e.g., 0.1 for 10%
  taxRate?: number;     // e.g., 0.15 for 15%
  totalPrice?: number;  // Calculated by backend or frontend for display
}

export type InvoiceStatus = "Paid" | "Pending" | "Overdue" | "Draft" | "Cancelled" | "PartiallyPaid";
export type InvoiceType = "Sales" | "Purchase" | "Tax" | "Return" | "Quote" | "SalesOrder" | "PurchaseOrder";

export interface Payment {
  id: string; // Usually generated by backend
  amount: number;
  paymentDate?: string; // Should be ISO string for API, display can format
  paymentMethod?: string;
  notes?: string;
  // invoiceId is implicit via the endpoint
}

export interface Invoice {
  id: string;
  invoiceNumber: string;
  date: string; // Store as ISO string (YYYY-MM-DD), display as DD/MM/YYYY
  issueDate?: string; // Optional: For alignment with Omit type in createInvoice
  dueDate?: string; // Store as ISO string (YYYY-MM-DD), display as DD/MM/YYYY
  customerSupplierId: string;
  customerSupplierName: string; // Denormalized for display
  type: InvoiceType;
  status: InvoiceStatus;
  items: InvoiceItem[];
  amount: number; // Subtotal (sum of item.unitPrice * item.quantity after discount)
  taxAmount: number; // Total tax for the invoice
  totalAmount: number; // Grand total (amount + taxAmount)
  paymentMethod?: string;
  salesperson?: string;
  notes?: string;
  isEInvoice?: boolean;
  eInvoiceStatus?: string;
  balanceDue?: number; // Calculated by backend: totalAmount - sum of payments
  payments?: Payment[]; // Array of payments made for this invoice
  lastActivity?: string; // Optional: For alignment with Omit type in createInvoice
}
